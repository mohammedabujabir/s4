// <auto-generated />
using System;
using Ecop.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecop.PL.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241212213013_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecop.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ecc15f5c-a5eb-4961-915b-bf4da5ac044b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae077cb6-f755-4608-bbf1-a3c2c8a6be9e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBh2DnlAxWqUzWDFkQSm2BVP6Q6Lz07LFG4BcA+xWrNRG/akTYs6dqRP7Rfd+NJK7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fa3ae2a-7853-4bb6-9d21-852081c08c49",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "4a432af5-fea6-40c6-aab0-0927e77ce829",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d1a898f-5769-4bff-a1b1-f1f2e31bf687",
                            Email = "braa@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRAA@GMAIL.COM",
                            NormalizedUserName = "Braa",
                            PasswordHash = "AQAAAAIAAYagAAAAEIkh4Opd4dHurLNqwpapWk1hWbo6xKU5CbkKkU21LxL4P+EO/i1hiBRd+clgveNkQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d9526e2-fc21-4a83-8cc1-36f021d9562c",
                            TwoFactorEnabled = false,
                            UserName = "Braa"
                        },
                        new
                        {
                            Id = "1b9689c3-d2df-4db1-8555-ecd9c29978b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "123cdd0d-055d-4ae2-bf8f-f36f35c10015",
                            Email = "Osama@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OSAMA@GMAIL.COM",
                            NormalizedUserName = "OSAMA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOcnfROVdusICrnKxCLPyxWgkG1d8XBJSA16JI30j3gir25pqqf/VOU1K1IPsdptlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85abdd67-6725-4ac3-9b5d-a5174d48b4ad",
                            TwoFactorEnabled = false,
                            UserName = "Osama"
                        },
                        new
                        {
                            Id = "4a3a4914-3e58-4dad-8be4-bfc1595588b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a2dd001-5bca-476f-b970-9b0819c5cd90",
                            Email = "Mohammed@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMMED@GMAIL.COM",
                            NormalizedUserName = "MOHAMMED",
                            PasswordHash = "AQAAAAIAAYagAAAAEHjwie2DkrxB7lTHTNTlMfcS8BX7sHDkpGe7lHtrVlmbAhiN22Vid4kwADF3ZgtriQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ace6cebf-bc05-4f9c-bf76-16caa0ba71b5",
                            TwoFactorEnabled = false,
                            UserName = "Mohammed"
                        },
                        new
                        {
                            Id = "bc22b377-69d7-407a-8fd5-a561f98bb1bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a06e2107-b098-43db-b5df-54bbd2f20c29",
                            Email = "Noor@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Noor@GMAIL.COM",
                            NormalizedUserName = "NOOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEI6YPka9Mhx9XhRcMI2kBwZN7z5vXkCH8dgWFKb4qoZfZT9X4GmfdNSOR+ogyrjf6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a7d1eff-c020-43cb-8024-40bb55af880b",
                            TwoFactorEnabled = false,
                            UserName = "Noor"
                        },
                        new
                        {
                            Id = "5be71fe5-57a6-424a-bb42-a5b3088dd6d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f7c33cf-7241-4bf2-8543-e47a0aaece69",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEAypUZl4QuvSU7Umwj2m4WFr96jAJvcsbxJAmHCdMnbwUaw3ZHbVzu4nC9h07XX44w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdffa4a4-30b6-4e29-83ae-491d2f4bfc9c",
                            TwoFactorEnabled = false,
                            UserName = "Ali"
                        },
                        new
                        {
                            Id = "783b9069-7ab2-4f4a-ae09-c4c9f25227a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "788ab7a0-7345-4b2c-8452-23766808bf66",
                            Email = "Hadi@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HADI@GMAIL.COM",
                            NormalizedUserName = "HADI",
                            PasswordHash = "AQAAAAIAAYagAAAAEEa0uBpeaCWZS8jFOHsJp5O4IFzDjzK+ZeSvFW2CjVvW0I2lcWtVzy+t2hH57gj93Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0504107-b7c9-4dd4-9d29-78a68b5771e8",
                            TwoFactorEnabled = false,
                            UserName = "Hadi"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitizenId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Camera_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CitizenId");

                    b.HasIndex("UserId");

                    b.ToTable("Citizens");

                    b.HasData(
                        new
                        {
                            CitizenId = 1,
                            Address = "Tubas",
                            Camera_id = "cam123",
                            Email = "braa@gmail.com",
                            Name = "Braa",
                            Password = "Braa@123",
                            Phone = "1231231234",
                            UserId = "4a432af5-fea6-40c6-aab0-0927e77ce829"
                        },
                        new
                        {
                            CitizenId = 2,
                            Address = "Tulkarm",
                            Camera_id = "cam456",
                            Email = "Osama@gmail.com",
                            Name = "Osama",
                            Password = "Osama@123",
                            Phone = "3213214321",
                            UserId = "1b9689c3-d2df-4db1-8555-ecd9c29978b7"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Court", b =>
                {
                    b.Property<int>("CourtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtId");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("Ecop.DAL.Models.CourtDecisions", b =>
                {
                    b.Property<int>("CourtDecisionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtDecisionsId"));

                    b.Property<int>("Courtid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.Property<string>("Penalty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoliceDecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Verdict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("CourtDecisionsId");

                    b.HasIndex("Courtid");

                    b.HasIndex("JudgeId");

                    b.HasIndex("PoliceDecisionId")
                        .IsUnique()
                        .HasFilter("[PoliceDecisionId] IS NOT NULL");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.Property<int>("JudgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JudgeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JudgeId");

                    b.HasIndex("UserId");

                    b.ToTable("Judges");

                    b.HasData(
                        new
                        {
                            JudgeId = 1,
                            Address = "Jenin",
                            Email = "Ali@gmail.com",
                            Name = "Ali",
                            Password = "Ali@123",
                            Phone = "1234567890",
                            UserId = "5be71fe5-57a6-424a-bb42-a5b3088dd6d3"
                        },
                        new
                        {
                            JudgeId = 2,
                            Address = "Nablus",
                            Email = "Hadi@gmail.com",
                            Name = "Hadi",
                            Password = "Hadi@123",
                            Phone = "0987654321",
                            UserId = "783b9069-7ab2-4f4a-ae09-c4c9f25227a9"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.Property<int>("PolicemanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicemanId"));

                    b.Property<string>("Badge_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PolicemanId");

                    b.HasIndex("UserId");

                    b.ToTable("Policemans");

                    b.HasData(
                        new
                        {
                            PolicemanId = 1,
                            Badge_Number = "12345",
                            Email = "Mohammed@gmail.com",
                            Name = "Mohammed",
                            Password = "Mohammed@123",
                            Phone = "0123456789",
                            UserId = "4a3a4914-3e58-4dad-8be4-bfc1595588b4"
                        },
                        new
                        {
                            PolicemanId = 2,
                            Badge_Number = "54321",
                            Email = "Noor@gmail.com",
                            Name = "Noor",
                            Password = "Noor@123",
                            Phone = "0987654321",
                            UserId = "bc22b377-69d7-407a-8fd5-a561f98bb1bc"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.Property<int>("PolicemanDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Policemanid")
                        .HasColumnType("int");

                    b.Property<bool>("ReferredToCourt")
                        .HasColumnType("bit");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("PolicemanDecisionId");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("PolicemanDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.Property<int>("TrafficViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrafficViolationId"));

                    b.Property<string>("Car_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Reported_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrafficViolationId");

                    b.HasIndex("CitizenId");

                    b.ToTable("TrafficViolations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a2c887f8-550a-4ed0-8428-7e85b5573459",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "bb1aaa8c-2791-49fa-a39e-4c9bbf14a10f",
                            Name = "Citizen",
                            NormalizedName = "CITIZEN"
                        },
                        new
                        {
                            Id = "4a7ff634-beed-4b8e-92e3-e7dc830fce9a",
                            Name = "Policeman",
                            NormalizedName = "POLICEMAN"
                        },
                        new
                        {
                            Id = "64f9d946-fd15-419d-8701-3056ef18bc4c",
                            Name = "Judge",
                            NormalizedName = "JUDGE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ecc15f5c-a5eb-4961-915b-bf4da5ac044b",
                            RoleId = "a2c887f8-550a-4ed0-8428-7e85b5573459"
                        },
                        new
                        {
                            UserId = "4a432af5-fea6-40c6-aab0-0927e77ce829",
                            RoleId = "bb1aaa8c-2791-49fa-a39e-4c9bbf14a10f"
                        },
                        new
                        {
                            UserId = "1b9689c3-d2df-4db1-8555-ecd9c29978b7",
                            RoleId = "bb1aaa8c-2791-49fa-a39e-4c9bbf14a10f"
                        },
                        new
                        {
                            UserId = "4a3a4914-3e58-4dad-8be4-bfc1595588b4",
                            RoleId = "4a7ff634-beed-4b8e-92e3-e7dc830fce9a"
                        },
                        new
                        {
                            UserId = "bc22b377-69d7-407a-8fd5-a561f98bb1bc",
                            RoleId = "4a7ff634-beed-4b8e-92e3-e7dc830fce9a"
                        },
                        new
                        {
                            UserId = "5be71fe5-57a6-424a-bb42-a5b3088dd6d3",
                            RoleId = "64f9d946-fd15-419d-8701-3056ef18bc4c"
                        },
                        new
                        {
                            UserId = "783b9069-7ab2-4f4a-ae09-c4c9f25227a9",
                            RoleId = "64f9d946-fd15-419d-8701-3056ef18bc4c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecop.DAL.Models.Car", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Citizen", "Citizen")
                        .WithMany("Cars")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.CourtDecisions", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Court", "Court")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("Courtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.Judge", "Judge")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.PolicemanDecision", "PoliceDecision")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Ecop.DAL.Models.CourtDecisions", "PoliceDecisionId");

                    b.HasOne("Ecop.DAL.Models.TrafficViolation", "ViolationStatus")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Ecop.DAL.Models.CourtDecisions", "Violationid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("Judge");

                    b.Navigation("PoliceDecision");

                    b.Navigation("ViolationStatus");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Policeman", "Policeman")
                        .WithMany("Decisions")
                        .HasForeignKey("PolicemanDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.TrafficViolation", "TrafficViolation")
                        .WithOne("Decision")
                        .HasForeignKey("Ecop.DAL.Models.PolicemanDecision", "Violationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policeman");

                    b.Navigation("TrafficViolation");
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Citizen", "Citizen")
                        .WithMany("TrafficViolations")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("TrafficViolations");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Court", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();

                    b.Navigation("Decision")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
